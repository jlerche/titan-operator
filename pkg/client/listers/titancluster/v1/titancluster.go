/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/jlerche/titan-operator/pkg/apis/titancluster/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TitanClusterLister helps list TitanClusters.
type TitanClusterLister interface {
	// List lists all TitanClusters in the indexer.
	List(selector labels.Selector) (ret []*v1.TitanCluster, err error)
	// TitanClusters returns an object that can list and get TitanClusters.
	TitanClusters(namespace string) TitanClusterNamespaceLister
	TitanClusterListerExpansion
}

// titanClusterLister implements the TitanClusterLister interface.
type titanClusterLister struct {
	indexer cache.Indexer
}

// NewTitanClusterLister returns a new TitanClusterLister.
func NewTitanClusterLister(indexer cache.Indexer) TitanClusterLister {
	return &titanClusterLister{indexer: indexer}
}

// List lists all TitanClusters in the indexer.
func (s *titanClusterLister) List(selector labels.Selector) (ret []*v1.TitanCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TitanCluster))
	})
	return ret, err
}

// TitanClusters returns an object that can list and get TitanClusters.
func (s *titanClusterLister) TitanClusters(namespace string) TitanClusterNamespaceLister {
	return titanClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TitanClusterNamespaceLister helps list and get TitanClusters.
type TitanClusterNamespaceLister interface {
	// List lists all TitanClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.TitanCluster, err error)
	// Get retrieves the TitanCluster from the indexer for a given namespace and name.
	Get(name string) (*v1.TitanCluster, error)
	TitanClusterNamespaceListerExpansion
}

// titanClusterNamespaceLister implements the TitanClusterNamespaceLister
// interface.
type titanClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TitanClusters in the indexer for a given namespace.
func (s titanClusterNamespaceLister) List(selector labels.Selector) (ret []*v1.TitanCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TitanCluster))
	})
	return ret, err
}

// Get retrieves the TitanCluster from the indexer for a given namespace and name.
func (s titanClusterNamespaceLister) Get(name string) (*v1.TitanCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("titancluster"), name)
	}
	return obj.(*v1.TitanCluster), nil
}
